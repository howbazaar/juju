// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/uniter/runner/jujuc (interfaces: ContextRelation)

// Package jujuc is a generated GoMock package.
package jujuc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	params "github.com/juju/juju/apiserver/params"
	relation "github.com/juju/juju/core/relation"
)

// MockContextRelation is a mock of ContextRelation interface
type MockContextRelation struct {
	ctrl     *gomock.Controller
	recorder *MockContextRelationMockRecorder
}

// MockContextRelationMockRecorder is the mock recorder for MockContextRelation
type MockContextRelationMockRecorder struct {
	mock *MockContextRelation
}

// NewMockContextRelation creates a new mock instance
func NewMockContextRelation(ctrl *gomock.Controller) *MockContextRelation {
	mock := &MockContextRelation{ctrl: ctrl}
	mock.recorder = &MockContextRelationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContextRelation) EXPECT() *MockContextRelationMockRecorder {
	return m.recorder
}

// FakeId mocks base method
func (m *MockContextRelation) FakeId() string {
	ret := m.ctrl.Call(m, "FakeId")
	ret0, _ := ret[0].(string)
	return ret0
}

// FakeId indicates an expected call of FakeId
func (mr *MockContextRelationMockRecorder) FakeId() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FakeId", reflect.TypeOf((*MockContextRelation)(nil).FakeId))
}

// Id mocks base method
func (m *MockContextRelation) Id() int {
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(int)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockContextRelationMockRecorder) Id() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockContextRelation)(nil).Id))
}

// Name mocks base method
func (m *MockContextRelation) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockContextRelationMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockContextRelation)(nil).Name))
}

// ReadSettings mocks base method
func (m *MockContextRelation) ReadSettings(arg0 string) (params.Settings, error) {
	ret := m.ctrl.Call(m, "ReadSettings", arg0)
	ret0, _ := ret[0].(params.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSettings indicates an expected call of ReadSettings
func (mr *MockContextRelationMockRecorder) ReadSettings(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSettings", reflect.TypeOf((*MockContextRelation)(nil).ReadSettings), arg0)
}

// SetStatus mocks base method
func (m *MockContextRelation) SetStatus(arg0 relation.Status) error {
	ret := m.ctrl.Call(m, "SetStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockContextRelationMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockContextRelation)(nil).SetStatus), arg0)
}

// Settings mocks base method
func (m *MockContextRelation) Settings() (Settings, error) {
	ret := m.ctrl.Call(m, "Settings")
	ret0, _ := ret[0].(Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Settings indicates an expected call of Settings
func (mr *MockContextRelationMockRecorder) Settings() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockContextRelation)(nil).Settings))
}

// Suspended mocks base method
func (m *MockContextRelation) Suspended() bool {
	ret := m.ctrl.Call(m, "Suspended")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Suspended indicates an expected call of Suspended
func (mr *MockContextRelationMockRecorder) Suspended() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspended", reflect.TypeOf((*MockContextRelation)(nil).Suspended))
}

// UnitNames mocks base method
func (m *MockContextRelation) UnitNames() []string {
	ret := m.ctrl.Call(m, "UnitNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// UnitNames indicates an expected call of UnitNames
func (mr *MockContextRelationMockRecorder) UnitNames() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitNames", reflect.TypeOf((*MockContextRelation)(nil).UnitNames))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/meterstatus (interfaces: MeterStatusState)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/juju/juju/state"
)

// MockMeterStatusState is a mock of MeterStatusState interface
type MockMeterStatusState struct {
	ctrl     *gomock.Controller
	recorder *MockMeterStatusStateMockRecorder
}

// MockMeterStatusStateMockRecorder is the mock recorder for MockMeterStatusState
type MockMeterStatusStateMockRecorder struct {
	mock *MockMeterStatusState
}

// NewMockMeterStatusState creates a new mock instance
func NewMockMeterStatusState(ctrl *gomock.Controller) *MockMeterStatusState {
	mock := &MockMeterStatusState{ctrl: ctrl}
	mock.recorder = &MockMeterStatusStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMeterStatusState) EXPECT() *MockMeterStatusStateMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockMeterStatusState) Application(arg0 string) (*state.Application, error) {
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(*state.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application
func (mr *MockMeterStatusStateMockRecorder) Application(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockMeterStatusState)(nil).Application), arg0)
}

// Unit mocks base method
func (m *MockMeterStatusState) Unit(arg0 string) (*state.Unit, error) {
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(*state.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit
func (mr *MockMeterStatusStateMockRecorder) Unit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockMeterStatusState)(nil).Unit), arg0)
}
